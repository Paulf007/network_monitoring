# Telegraf configuration for monitoring local network using SNMP.

[global_tags]
  # All metrics that are gathered will be tagged with this tags.
  # rack = "1a"

[agent]
  ## Default data collection interval.
  interval = "60s"

  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 10000

  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "5s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "60s"

  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "5s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  #hostname = ""


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]

  # The target database for metrics (telegraf will create it if not exists)
  database = "telegraf"

  # Precision of writes, valid values are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  precision = "s"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  timeout = "5s"

  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"

###############################################################################
#                                  INPUTS                                     #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  # Whether to report per-cpu stats or not
  percpu = true
  # Whether to report total system cpu stats or not
  totalcpu = true
  # Comment this line if you want the raw CPU time metrics
  fielddrop = ["time_*"]

# Read metrics about disk usage by mount point
[[inputs.disk]]
  # By default, telegraf gather stats for all mountpoints.
  # Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points=["/"]

  # Ignore mountpoints by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]
  # By default, telegraf will gather stats for all devices including
  # disk partitions.
  # Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  # Uncomment the following line if you do not need disk serial numbers.
  # skip_serial_number = true

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

# Gather metrics about network interfaces
[[inputs.net]]
  interfaces = ["eth*"]

# Listen on UDP port 514 and collect all syslog messages.
[[inputs.syslog]]
  server = "udp://0.0.0.0:514"
  ## Maximum number of concurrent connections.
  max_connections = 10
  ## Whether to parse in best effort mode or not.
  best_effort = true

# Gathers DNS query times in miliseconds.
[[inputs.dns_query]]
  ## Servers to query.
  servers = ["8.8.8.8", "1.1.1.1"]
  ## Domains or subdomains to query. "."(root) is default
  # domains = ["google.com"]
  ## Query record type.
  record_type = "A"
  ## DNS server port. 53 is default
  port = 53
  ## Query timeout in seconds. Default is 2 seconds
  timeout = 2

# Gather ping times.
[[inputs.ping]]
  ## URLs or IPs to ping.
  urls = ["github.com", "8.8.8.8"]
  ## Number of pings to send per collection (ping -c <COUNT>).
  count = 3
  ## Per-ping timeout, in s. 0 == no timeout (ping -W <TIMEOUT>).
  timeout = 10.0
  ## Interface to send ping from (ping -I <INTERFACE>).
  interface = "eth0"

# Gather SNMP stats of Wi-Fi AP (Mikrotik).
[[inputs.snmp]]
  ## List of all Wi-Fi APs in network.
  agents = [ "10.0.0.2" ]
  ## SNMP version.
  version = 2
  ## SNMP community string.
  community = "telegraf"
  ## Influx measurement name.
  name = "ntwrk_wifi"

  [[inputs.snmp.field]]
    ## Number of connected and authorized clients.
    name = "authClientCount"
    oid = ".1.3.6.1.4.1.14988.1.1.1.3.1.11.1"

  [[inputs.snmp.field]]
    ## Client Connection Quality, percent.
    name = "overallCCQ"
    oid = ".1.3.6.1.4.1.14988.1.1.1.3.1.10.1"

  [[inputs.snmp.field]]
    ## TX rate.
    name = "txRate"
    oid = ".1.3.6.1.4.1.14988.1.1.1.3.1.2.1"

  [[inputs.snmp.field]]
    ## RX rate.
    name = "rxRate"
    oid = ".1.3.6.1.4.1.14988.1.1.1.3.1.3.1"

  [[inputs.snmp.field]]
    ## Noise floor in dBm.
    name = "noiseFloor"
    oid = ".1.3.6.1.4.1.14988.1.1.1.3.1.9.1"

# Gather system and interface stats from all Mikrotik devices in the network.
[[inputs.snmp]]
  ## List of all Mikrotik devices.
  agents = [ "10.0.0.1", "10.0.0.2" ]
  ## SNMP version.
  version = 2
  ## SNM community string.
  community = "telegraf"
  ## Influx measurement name.
  name = "ntwrk_system"

  [[inputs.snmp.field]]
    name = "ifPhysAddress"
    oid = ".1.3.6.1.2.1.2.2.1.6.1"  # "IF-MIB::ifPhysAddress.1"
    is_tag = true
    conversion = "hwaddr"

  [[inputs.snmp.field]]
    name = "sysName"
    oid = ".1.3.6.1.2.1.1.5.0"  # "RFC1213-MIB::sysName.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "uptime"
    oid = ".1.3.6.1.2.1.25.1.1.0"  # "HOST-RESOURCES-MIB::hrSystemUptime.0"

  [[inputs.snmp.field]]
    name = "cpu"
    oid = ".1.3.6.1.2.1.25.3.3.1.2.1"  # CPU usage

  [[inputs.snmp.field]]
    name = "voltage"
    oid = ".1.3.6.1.4.1.14988.1.1.3.8.0"  # Voltage

  [[inputs.snmp.field]]
    name = "temperature"
    oid = ".1.3.6.1.4.1.14988.1.1.3.10.0"  # Temp

  [[inputs.snmp.field]]
    name = "mtxrDHCPLeaseCount"
    oid = ".1.3.6.1.4.1.14988.1.1.6.1.0"  # mtxrDHCPLeaseCount

  [[inputs.snmp.table]]
    name = "ntwrk_interfaces"
    inherit_tags = [ "ifPhysAddress", "sysName" ]

    [[inputs.snmp.table.field]]
      name = "ifName"
      oid = ".1.3.6.1.2.1.31.1.1.1.1"  # "IF-MIB::ifName"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "ifOperStatus"
      oid = ".1.3.6.1.2.1.2.2.1.8"  # "IF-MIB::ifOperStatus"
      conversion = "int"

    [[inputs.snmp.table.field]]
      name = "ifInOctets"
      oid = ".1.3.6.1.2.1.2.2.1.10"  # "IF-MIB::ifInOctets"
      conversion = "int"

    [[inputs.snmp.table.field]]
      name = "ifOutOctets"
      oid = ".1.3.6.1.2.1.2.2.1.16"  # "IF-MIB::ifOutOctets"
      conversion = "int"

###############################################################################
#                              SERVICE INPUTS                                 #
###############################################################################
